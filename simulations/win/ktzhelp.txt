This program may run two different kinds of simulation: (1) Avalanche Dynamics and (2) Bifurcation.
(1) The avalanche dynamics runs the specified network and returns avalanche distributions.
(2) Bifurcation simulation runs the network for the specified J (or alpha) and I (or r) intervals and returns phase transition information as the parameters change.
-
USAGE
-----
$ KTzV2.dll [-run] [-ask] [-wait] [PARAM1=VALUE1 PARAM2=VALUE2 ...]
arguments between braces are optional
-run		runs the program; if it is not specified, this message is printed
-ask		asks for params change
-wait		wait for ENTER on the end of the program
-
QUENCHED DISORDER
-------- --------
Some parameters allow quenched disorder (see in the description of each parameter below).
To set disorder, use: XDisorder=Type:X_Min_OR_X_Mean:X_Max_OR_X_Stddev
E.g.,
$ KTzV2.dll [...] XDisorder=Type:X_Min_OR_X_Mean:X_Max_OR_X_Stddev [...]
where X is the exact name of the parameter that accepts disorder; Type is either Gaussian or Uniform;
if Type is Uniform, then provide min and max values; if type is Gaussian, then provide mean and stddev values
For example: you can put in the param list: dDisorder=Gaussian:0.001:0.0001 TDisorder=Uniform:0.2:0.5
to add Gaussian quenched disorder to the neuron's d parameter with mean=0.001 and stddev=0.0001;
and uniform quenched disorder to T between 0.2 and 0.5.
NOTE: Gaussian disorder is NOT 'restricted' and may change the sign of the parameter for some neurons/synapses!
      Use with caution specially in the synapse parameters!
-
ALLOWED PARAMETERS
------- ----------
*** parameters which are not specified will have the values below
*** the following names are available for PARAMX:
# 
# -
#
#-------------------------------------------------------
#-------------------------------------------------------
#----------------- Network Parameters ------------------
#-------------------------------------------------------
#-------------------------------------------------------
# 
# rewP = 0.02		Watts-Strogatz or Random Graph Network parameter - rewire probability or edge creation prob
# 
# 
# Lx = 40		Amount of elements on x axis (linear size) (total amount is always assumed as Lx*Ly*Lz)
# 
# 
# Ly = 40		Amount of elements on y axis (linear size) (total amount is always assumed as Lx*Ly*Lz)
# 
# 
# Lz = 1		Amount of elements on z axis (linear size) (total amount is always assumed as Lx*Ly*Lz)
# 
# 
# netType = SquareLatticeFreeBC		network architecture
#				0 = LinearLatticePeriodicBC
#				1 = LinearLatticeFreeBC
#				2 = SquareLatticePeriodicBC
#				3 = SquareLatticeFreeBC
#				4 = CompleteGraph
#				5 = RandomGraph
#				6 = BarabasiAlbertGraph
#				7 = WattsStrogatzGraph
#				8 = ConnectedWattsStrogatzGraph
#				9 = CubicLatticePeriodicBC
#				10 = CubicLatticeFreeBC
#				11 = FromFile
# 
# 
# netDir = No		directed = yes: the synapses are one-way i->j; directed = no: two-way synapses
#				0 = No
#				1 = Yes
# 
# 
# dim = 2		dimension of the network (network will have L^dim neurons)
# 
# 
# nNeigh = 4		Watts-Strogatz network parameter - amount of neighbours in the initial configuration of WS network
# 
# 
# nConn = 3		Barabasi-Albert network parameter - amount of connections which a new node will initially have when creating BA network
# 
#
#------------------------------------------------------
#------------------------------------------------------
#----------------- Neuron Parameters ------------------
#------------------------------------------------------
#------------------------------------------------------
# 
# K = 0.6		(allows quenched disorder) K self-interaction intensity between y and x
# 
# 
# T = 0.35		(allows quenched disorder) T neuronal gain of the x variable
# 
# 
# d = 0.001		(allows quenched disorder) delta: z recovery inverse time scale, controls refractory period and burst damping
# 
# 
# l = 0.008		(allows quenched disorder) lambda: z-x coupling time scale, controls refractory period
# 
# 
# xR = -0.7		(allows quenched disorder) z-x coupling recovery x potential, controls burst duration
# 
# 
# H = 0		(allows quenched disorder) polarizing current (external field in x; or in y if KTz2H neuron is selected)
# 
# 
# Q = 0		(allows quenched disorder) polarizing current for x in KTz2Tanh (external field)
# 
# 
# Theta = 0.1		threshold of SI(RS) element
# 
# 
# minTheta = 0		min value for threshold of SI(RS) element in bifurcation simulation
# 
# 
# maxTheta = 1		max value for threshold of SI(RS) element in bifurcation simulation
# 
# 
# neuron = KTz		type of neuron to use
#				0 = KTH
#				1 = KTHLog
#				2 = KTz
#				3 = KTzLog
#				4 = KTz2Tanh
#				5 = KTzMF
#				6 = KTzLogMF
#				7 = SIElement
#				8 = GLNeuron
#				9 = GLNeuronLHG
#				10 = GLNeuronLHG1Par
#				11 = GLNeuronFacilitation
#				12 = GLNeuronGammaStochastic
# 
# 
# avgInp = No		choose whether the neuron will average its synaptic input (may be useful in mean-field networks)
#				0 = No
#				1 = Yes
# 
# 
# nTheta = 100		number of values for threshold of SI(RS) element in bifurcation simulation
# 
# 
# ThetaRange = 		range of values for threshold of SI(RS) element in bifurcation simulation  (comma separated list of: min:max:dx OR range(min:max:dx) OR linspace(min:max:nx) OR logspace(min:max:nx))
# 
#
#--------------------------------------------------------
#--------------------------------------------------------
#----------------- InitCond Parameters ------------------
#--------------------------------------------------------
#--------------------------------------------------------
# 
# x0 = -0.6971564118917724		neuron initial condition on x
# 
# 
# y0 = -0.6971564118917724		neuron initial condition on y
# 
# 
# z0 = -0.0227487048658225		neuron initial condition on z
# 
# 
# iCond = ProgramSpecified		type of initial condition
#				0 = FromXMLFile
#				1 = FromLastSimulation
#				2 = ProgramSpecified
#				3 = RandomXPositively
#				4 = RandomYPositively
#				5 = RandomZPositively
#				6 = RandomXYPositively
#				7 = RandomXZPositively
#				8 = RandomYZPositively
#				9 = RandomXYZPositively
#				10 = RandomX
#				11 = RandomY
#				12 = RandomZ
#				13 = RandomXY
#				14 = RandomXZ
#				15 = RandomYZ
#				16 = RandomXYZ
# 
#
#-------------------------------------------------------
#-------------------------------------------------------
#----------------- Synapse Parameters ------------------
#-------------------------------------------------------
#-------------------------------------------------------
# 
# J = -0.15		(allows quenched disorder) coupling intensity (conductance)
# 
# 
# tauf = 2		(allows quenched disorder) tau_f: recovery time scale of the f variable for the chemical synapse
# 
# 
# taug = 2		(allows quenched disorder) tau_g: recovery time scale of the g variable for the chemical synapse
# 
# 
# minJ = -0.2		minimum J on bifurcation simulations
# 
# 
# maxJ = -0.01		maximum J on bifurcation simulations
# 
# 
# R = 0.036		(allows quenched disorder) noise amplitude
# 
# 
# noiseRatio = 0.1		(allows quenched disorder) fraction of J to use as noise amplitude
# 
# 
# alpha = 1.5		(allows quenched disorder) LHG-like dynamics for J in Chemical Synapses: coupling intensity * u
# 
# 
# minalpha = 0.8		LHG-like dynamics for J in Chemical Synapses: minimum couplingintensity*u on bifurcation simulations
# 
# 
# maxalpha = 1.8		LHG-like dynamics for J in Chemical Synapses: maximum couplingintensity*u on bifurcation simulations
# 
# 
# u = 0.2		(allows quenched disorder) LHG-like dynamics for J in Chemical Synapses: synapse depression strength
# 
# 
# tauJ = 3000		(allows quenched disorder) LHG-like dynamics for J in Chemical Synapses: coupling J recovery time scale
# 
# 
# dt = 0.5		LHG-like dynamics for J in Chemical Synapses: precision on the integration of the J equations (with Euler method)
# 
# 
# sType = KTNoisyChemicalSynapse		type of the synapse
#				0 = KTChemicalSynapse
#				1 = KTNoisyChemicalSynapse
#				2 = KTDynamicChemicalSynapse
#				3 = GapJunction
#				4 = PulseCoupling
#				5 = RectifyingGapJunction
#				6 = NormalizedPulseCoupling
# 
# 
# noiseType = ProportionalAmplitude		type of the synaptic noise
#				0 = ProportionalAmplitude
#				1 = GreaterThanJ
# 
# 
# nJ = 100		amount of J (synaptic coupling) on bifurcation simulations
# 
# 
# nalpha = 100		amount of alpha (LHG J adaptation intensity) on bifurcation simulations
# 
# 
# coupParam = Homogeneous		determines whether the J are given by J parameter or by adjacency matrix
#				0 = Homogeneous
#				1 = AdjMatrix
# 
# 
# JRange = 		range values for J parameter when running Bifurcation simulation; if set ignores minJ, maxJ, nJ (comma separated list of: min:max:dx OR range(min:max:dx) OR linspace(min:max:nx) OR logspace(min:max:nx))
# 
# 
# alphaRange = 		range values for alpha parameter when running Bifurcation simulation; if set ignores minalpha, maxalpha, nalpha (comma separated list of: min:max:dx OR range(min:max:dx) OR linspace(min:max:nx) OR logspace(min:max:nx))
# 
#
#--------------------------------------------------------
#--------------------------------------------------------
#----------------- Stimulus Parameters ------------------
#--------------------------------------------------------
#--------------------------------------------------------
# 
# I = 0.1		stimulus intensity
# 
# 
# minI = 0.03		minimum I on bifurcation simulations
# 
# 
# maxI = 0.13		maximum I on bifurcation simulations
# 
# 
# r = 0.1		Poisson stimulus rate
# 
# 
# minr = 1E-05		minimum Poisson stimulus rate on bifurcation simulations
# 
# 
# maxr = 10		maximum Poisson stimulus rate on bifurcation simulations
# 
# 
# IStdDev = 0		std deviation of I in case of Poisson stimulus: set to 0 to have the same intensity for every stimulus
# 
# 
# stimType = Delta		type of the stimulus
#				0 = Delta
#				1 = DeltaTrain
#				2 = PoissonProcess
#				3 = DeltaWhenInactive
#				4 = None
# 
# 
# sStim = 0		timestep in which the network will be stimulated for each run
# 
# 
# iStim = -1		index of the neuron which will be stimulated
# 
# 
# nI = 100		amount of I (stimulus intensity) on bifurcation simulations
# 
# 
# nr = 100		amount of r (Poisson rate) on bifurcation simulations
# 
# 
# deltaT = 20		time interval between two consecutive delta stimuli
# 
# 
# indChoice = Fixed		iStim!=-1 forces indChoice==Fixed; method for choosing stimulus index
#				0 = Fixed
#				1 = SquareCenter
#				2 = Random
#				3 = MostConnected
# 
# 
# IRange = 		range values for I parameter when running Bifurcation simulation; if set ignores minI, maxI, nI (comma separated list of: min:max:dx OR range(min:max:dx) OR linspace(min:max:nx) OR logspace(min:max:nx))
# 
# 
# rRange = 		log-spaced range values for r parameter when running Bifurcation simulation; if set ignores minr, maxr, nr (comma separated list of: min:max:dx OR range(min:max:dx) OR linspace(min:max:nx) OR logspace(min:max:nx))
# 
#
#----------------------------------------------------------
#----------------------------------------------------------
#----------------- Simulation Parameters ------------------
#----------------------------------------------------------
#----------------------------------------------------------
# 
# sampFrac = 1		fraction of neurons to sample from the network -- when subsampling is intended
# 
# 
# nSteps = 10000		total timesteps to run each simulation
# 
# 
# nStart = 0		timestep in which the network starts to be recorded
# 
# 
# tBin = 20		size of the bin (in timesteps) to divide nSteps in order to run the simulation
# 
# 
# wData = No		choose whether the program will run a simulation only to write output data in the case of dynamics simulation
#				0 = No
#				1 = Yes
# 
# 
# wCSV = No		if wData=Yes, then wCSV=Yes writes a CSV file with the x_i(t) data
#				0 = No
#				1 = Yes
# 
# 
# wSpk = Yes		choose whether the program will run a simulation only to write a spike distribution file in the case of dynamics simulation
#				0 = No
#				1 = Yes
# 
# 
# wObs = No		write observations of the avalanche sizes for Bifurcation sim type for each (par1,par2) pair
#				0 = No
#				1 = Yes
# 
# 
# wDif = No		choose whether the program will write a file containing xi-xj data; WARNING FILE WILL BE VERY LARGE if N is big
#				0 = No
#				1 = Yes
# 
# 
# nSim = 20		amount of realizations for each pair (stimulus,coupling) on bifurcation simulations
# 
# 
# cVar = NumberOfNeurons		choose if the program will count number of neurons spiking or number of spikes; if NumberOfNeurons is set, then each of the nSim run is performed during nSteps timesteps
#				0 = NumberOfNeurons
#				1 = NumberOfSpikes
# 
# 
# samp = Full		choose the sampling type (full or subsampled)
#				0 = Full
#				1 = Partial
# 
# 
# rest = 10		interval (in tBin's) between an avalanche and a new stimulus for no activity stimulus type (i.e., if no activity is detected in a time bin)
# 
# 
# simType = Dynamics		choose if the program will run bifurcation or dynamics
#				0 = Dynamics
#				1 = DynamicsWithinParamRange
#				2 = Bifurcation
#				3 = KTzPhaseDiagram
# 
# 
# dynType = NetworkReset		each avalanche is generated independently of each other or after a time window
#				0 = ContinuousTime
#				1 = NetworkReset
# 
# 
# oFileFormat = txt		Chooses whether to write the main outputs either in txt (.dat extension) or mat-file format (.mat MATLAB format)
#				0 = txt
#				1 = mat
# 
# 
# ParamForRange = J		parameter used to create a range for simulation of the type DynamicsWithinParamRange
#				0 = J
#				1 = I
#				2 = alpha
#				3 = r
#				4 = Theta
# 
# 
# bifWrite = OnTheEnd		OnTheFly == writes data after each pair (I,J); OnTheEnd == writes after everything is finished
#				0 = OnTheFly
#				1 = OnTheEnd
# 
# 
# outAvgMode = OverRealizations		determines whether the output average should be taken over many avalanches or just temporal average (for bifurcation simulations)
#				0 = OverRealizations
#				1 = OverTime
# 
# 
# writeRhoTS = No		writes rho(t) for each J in JRange (only if outAvgMode=OverTime); rho(t) = sum x(t)>0
#				0 = No
#				1 = Yes
# 
# 
# oFile = 		prefix of the output file name -- do not use an extension
# 
# 
# netFile = 		input file with adjacency matrix
# 
